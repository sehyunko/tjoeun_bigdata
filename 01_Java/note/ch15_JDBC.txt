15장. JDBC 

그동안 배운 Oracle DB나 MySQL을 자바와 연동하여 DB에 담긴 정보를 입출력하는 작업을 할 수 있다. 
(Oracle DB를 기준으로 요약 정리를 하겠다. MySQL을 자바와 연동 시켜 작업 하는 과정도 Oracle DB와 유사하므로) 

0. 준비 작업
먼저 오라클이 설치 된 폴더 내에 (C드라이브 아래에 있음), jdbc 라는 폴더 속 lib 안에 있는 ojdbc6.JAR 이라고 하는

파일을 Java JRE 폴더 내 lib 폴더 (API문서가 담긴 파일) 아래 ext 폴더 (외부 API를 담은 폴더) 안에 옮겨 넣어준다. 

이후 ojdbc6.JAR을 통해 Java와 Oracle DB를 연동한다 


1. 자바 내에서 Oracle을 연동해 작업하는 로직 

(1) Class.forName(드라이버가 담긴 주소)를 통해 먼저 드라이버를 로드해준다 

(2) Connection 객체에 DriverManager.getConnection(DB주소, DB아이디, DB비밀번호)를 넣어준다 

(3) Connection 객체를 통해 prepareStatement 메소드를 호출, 전송할 쿼리문을 메소드에 넣어준다 

(4) prepareStatement 객체를 통해 setString/setInt 등의 메소드를 호출하고, 메소드들을 통해 쿼리문내 추가할 인자값을 넣어준다

(5)  prepareStatement 객체로 executeQuery(select문 작성시) 또는 executeUpdate(update 나 delete문 작성시)를 호출한다. 
 -> executeQuery 또는 executeUpdate 객체가 반환하는 결과값을 변수에 담는다 (select문 작성시 ArrayList에, update나 delete문 작성시 int 변수에)

(6) finally 문 내에서 생성한 객체들을 close 해준다. 

2. 이후 Java를 통해 DB 접근시 사용하는 Dao, Dto 클래스
-> 위의 로직을 수행하는 로직과 DB에 있는 데이터를 이용하여 추가 작업을 하는 로직을 한번에 작성하면 코드가 너무 방대해진다. 
-> 데이터 접근을 직접적으로 수행하는 Dao 와 Dao가 데이터를 접근 할 때 필요한 인자값을 전달해주는 Dto를 만들어 코드를 간결화 해준다. 

** Dao 클래스는 싱글톤 패턴으로 만들어 DB를 접근할 때마다 여러 객체가 생성되지 않도록 설계한다.