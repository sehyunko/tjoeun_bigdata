4장. 객체 지향 프로그래밍 (OOP) 

한 문서내 메소드의 양이 많아지면 추후 유지 보수가 힘들다 -> 동일한 종류의 일을 처리하는 메소드들을 모아놓은 클래스 (class) 등장 

객체 (인스턴스): 클래스가 일을 처리하기 위한 로직을 담아 놓은 설계도라면,그러한 클래스에 사용자가 원하는 데이터를 주어 생성한 것이 객체임.
	        
	        객체 변수 생성시, 객체 변수내에는 객체의 정보가 담긴 메모리의 주소를 담는다. 객체의 직접적인 데이터를 담지는 않음.

1. 클래스 작성하는 기본적인 코딩 방법 

(1) 클래스명
클래스의 이름은 항상 대문자로 시작한다 

(2) 클래스의 전체적인 설계 

public class ExClass {

	private int value1; (속성=필드=맴버 변수: 메소드들이 입력받아 작업을 수행할 변수를 선언한다. 보통 맴버 변수는 private 접근자를 설정하여
			외부에서 직접적으로 접근 할수 없게끔 한다.)
	
	public ExClass(value1 인자값이 필요에 따라 올 수도 있음){ (생성자: 객체 생성시 무조건 호출되는 메소드. 주로 인자값을 받아 맴버 변수값을 초기화하는데 활용됨)
		this.value1 = value1; (좌변의 인자값은 클래스 내에서 선언한 변수, 우변은 사용자로부터 입력받은 인자값) 
	}
	
	일반 메소드들 (구체적으로 수행할 작업들에 대한 메소드들) 
	. 
	.
	.
	public void setValue1(value1){ (맴버 변수 접근자가 private이므로 변수의 값을 변경할 시, setter함수를 통해 접근하여 값을 변경한다)
		this.value1 = value1; 
	}
	
	public int getValue1(value1){ (맴버 변수의 값을 호출하고 싶을시 getter 함수를 이용한다)  
		return value1; 
	}

*** 매개변수가 있는 생성자를 만들면 컴파일 후 자바 컴파일러가 자동으로 매개변수가 없는 생성자 함수를 만들어 주지 않으므로 주의가 필요함.

(3) 객체 생성 

ExClass abc = new ExClass(3); 
변수타입(클래스명)  객체 변수 = new 클래스명(인자값); 