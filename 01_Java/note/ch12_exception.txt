12장. 예외 처리 

문법적으로나 논리적, 시스템적으로 에러가 날 수 있는 상황에서도 프로그램이 멈추지 않고 계속 프로그램이 작동할 수 있도록 

사전에 예외 발생시 작동할 작업을 수행해놓는다 . 

*예외 처리 구문 
1. try-catch 문 
try{
	예외가 발생 할수 있는 명령문 

} catch(에러 타입 에러변수){
	예외(에러) 발생 시 수행할 명령문 
} finally{
	예외 발생의 여부와 상관없이 맨 마지막에 수행할 명령문
} 

보통 여러 try 블럭을 중첩해서 작성할시 try블럭은 한번만 작성하고 그 뒤의 catch문을 여러번 중첩하여 작성한다.  

2. throw 문 

(1)보통 메소드에 작성을 한다면, 예외가 발생해도 해당 메소드에서 예외처리를 하지 않고, 메소드를 호출한 곳 에서 예외처리를 한다는 의미 

(2) throw new Exception("에러 메시지"); -> 사용자가 강제로 에러를 발생시킬때 사용한다

*자주 발생될 수 있는 예외 타입들 

ArrayIndexOutOfBoundsException: 배열을 사용시 배열 길이 보다 큰 인덱스를 호출

NullPointerException: 존재하지 않는 객체나 null 값을 가진 객체를 호출할 때 발생 

NumberFormatException: 숫자로 변경할 수 없는 문자열을 변경하려할 때 발생 