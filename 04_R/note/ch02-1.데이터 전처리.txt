2장. 데이터 전처리 -1 

1. 파일 입출력 

read.table( "파일경로", header = TRUE, sep=","encoding="UTF-8")  -> seperator를 , 로 지정하여 csv 파일을 읽어 들인다. header 옵션을 TRUE로 지정하여 첫 줄은 열이름으로 받아들인다. 

write.table( "파일경로", header = TRUE, sep=","encoding="UTF-8")  -> seperator를 , 로 지정하여 csv 파일로 작성한다. header 옵션을 TRUE로 지정하여 첫 줄은 열이름으로 보낸다. 

read.csv("파일 경로", header = TRUE, encoding = "UTF-8") 

write.csv("파일 경로", header = TRUE, encoding = "UTF-8") 

cat("파일 경로", sep="," , append = FALSE) -> append = TRUE로 설정하면, 기존에 있던 파일에 내용을 추가적으로 첨가한다.

** 위 함수들의 encoding 기본값은 윈도우 환경에서 "CP949"인데, CP949를 사용하면 '믜' 와 같은 한글이 깨져서 나온다. 


2. apply 계열 함수들 ( 비그룹화 함수들, 'group by 카테고리' 의 형태로 함수 적용이 되지않는다) 

(1) apply( 데이터 프레임, MARGIN= 0또는1, FUN= 적용 함수 )  

데이터 프레임을 인자로 받고 MARGIN 옵션을 통해 행 적용 0 / 열 적용 1 여부를 결정하고, FUN 옵션에 적용함수를 기입 -> 반환값은 벡터 이다. 


(2) lapply( 데이터 프레임, MARGIN= 0또는1, FUN= 적용 함수 )  

apply 함수와 하는 일은 똑같으나, 반환값과 인자값이 list인점이 틀리다


(3) sapply( 데이터 프레임, MARGIN= 0또는1, FUN= 적용 함수 )  

lapply와 하는 일은 똑같으나, 반환값이 행렬 또는 벡터이다. (리스트나 데이터 프레임이 아니므로 $ 사용 불가) 


(4) vapply (list, function, FUN.VALUE = type)  

sapply와 똑같으나, FUN.VALUE를 통해서 입력되는 인자값의 데이터 포맷을 지정해 줄 수 있다.


(5) mapply (적용 함수, 인자값1, 인자값2, ... , 데이터프레임) 

적용되는 함수에 전달되는 인자값이 여러개 일때 쓰인다.  반환값은 행렬 또는 벡터이다. 

3. 그룹화 함수 ( 카테고리 변수를 기준으로 그룹화 하여 연산을 할 수 있다) 

(1) tapply(적용할 열, 그룹화 할 카테고리 변수 열, FUN = 적용함수 ) 

1개열, 1개 함수에 대해서만 적용가능 하다. 반환값은 벡터 형태이다. 


(2) summaryBy(적용 열1+적용 열2 ~ 그룹열1+그룹열2, data=데이터프레임, FUN= c(적용함수1, 적용함수2) ) 

다수의 열, 다수의 함수에 대해 적용가능 하다. 인자값을 formula 형태로 받음. 

반환값은 데이터 프레임의 형태

(3) by( c(적용 열1, 적용열, ... ), 그룹화 열, FUN= 적용 함수) 

1개의 그룹열과, 1개의 함수로 다중 열에 적용한다

