9장. 객체지향 프로그래밍 
 
1. 클래스 내 메소드 및 변수의 종류

(1) 인스턴스 메소드 

-> 객체를 생성하여 접근하는 메소드로, 인스턴스 메소드 생성시에는 항상 self 인자를 첫 매개변수에 넣어준다. 

    또한 변수에 접근을 할때, 객체를 통해 접근을 하기 위해선 self.변수명 방식으로 접근한다.  

<코드 작성 구조> 

class 클래스명: 
	'"첫 줄에 주석을 달으면 이 주석이 함수 사용법 조회시 (shift +tab) docstring 문서로 나온다"  
	
	def __init__(self, 인자값1, 인자값2, ....): 
		self.인자값 = 매개변수 인자값 

(2) static 메소드 

객체 생성을 하지 않고 클래스명을 통해 접근을 한다. static 메소드, 변수들은 여러 객체들 사이에서 공통으로 공유하게 된다. 

static 변수에 접근할 때에는 클래스명으로 접근 한다. (ex. 클래스명._클래스명__static 변수명) 

static 메소드에 접근할 때에도 역시 클래스명을 통해 접근 한다 (ex. 클래스명.static메소드( ) )  

<코드 작성 구조>

class 클래스명: 
	' docstring ' 
	__static 변수   # 생성자 내부가 아닌 외부에 변수를 선언하게 되면 static 변수가 선언되며, 보통 변수명 앞에 __를 붙인다
	.
	.
	. 
	@staticmethod
	def 메소드명( ): # 인스턴스 메소드와 달리 인자값으로 아무것도 전달하지 않는다. 
	    메소드 정의 

(3) class 메소드 

static 메소드와 인스턴스 메소드의 중간 느낌이라고 보면 된다. static 메소드와 같이 객체 생성 없이 클래스를 통해 변수나 메소드에 접근한다. 

하지만 static 메소드와 같이 공유 영역에 변수나 메소드를 생성하여 모든 객체간 변수값이나 메소드를 공유하지는 않는다 

<코드 작성 구조>

class 클래스명: 
	' docstring ' 
	
	@classmethod
	def 메소드명(cls): # 인스턴스 메소드의 self와 비슷하게 cls 인자를 첫 인자로 항상 전달해준다
	    메소드 정의 

2. 생성자와 소멸자 

생성자 ( __init__) : 객체 생성시 자동으로 호출되는 메소드. 주로 객체를 생성하면 전달받은 인자값으로 인스턴스 변수값을 초기화하는데 쓰인다

소멸자 (__del__) : 객체 삭제시 자동으로 호출된다. (del 객체/변수 -> 객체나 변수를 삭제할 때 쓰인다) 


3. 상속과 재정의 

<코드 작성 구조>

class 클래스명(상속 받을 클래스명): 
	''' 
	docstring
	'''
	def __init__(self, 인자값...) # 자식 클래스의 인자값 뿐만 아니라, 부모클래스에 있던 인자값들 또한 같이 인자값으로 넣어 줘야된다.
	     super( ).__init__(인자값1, 인자값2, ...)  # 부모클래스에서 했던 변수값 초기화를 그대로 가져온다 
	     # 부모클래스.__init__(self, 인자값1, 인자값2,... ) # 위 코드와 동일하다. 다만 super( ) 메소드 이용할 때와 달리 self 인자값이 꼭 전달되어야함
	def __str__(self ):
	     return super( ).__str__( ) + '추가할 내용'  # 일반 메소드를 상속 받아 오버라이드 (__str__ 메소드는 자바의 toString( )과 동일) 


