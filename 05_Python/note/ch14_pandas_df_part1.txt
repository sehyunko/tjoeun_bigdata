14장. Pandas 데이터 프레임 part1. 

1. 각 종 파일 데이터 프레임으로 불러오기 

csv, json, hdf 등등 사용 함수들 모두 인자값은 동일 하게 받는다. 

import pandas as pd 

pd.read_csv(' 파일 경로 ' , encoding=' utf-8 or cp949 or euc-kr', sep='default 값은 , ', comment='#' ) : csv 파일을 읽어온다. 간혹, 데이터 내에 #과 함께 주석이 달린 행이 있는데, comment='#'을 지정하면 해당 부분은 skip하고 읽어온다.

pd.read_json( ) : json 파일은 딕셔너리 형태로 저장 된, 각 데이터 행이 개체에 담겨져서 읽어들이는 파일 형식이다. 

pd.read_hdf( ) : hdf 파일은 주로 딥러닝 모델의 결과를 파일로 저장 할 때 이용된다. 

** xml 파일 형식: html 태그 형식으로 저장된 데이터 파일이다. 


2. 간단한 데이터 프레임 직접 생성 

pd.DataFrame( 딕셔너리, columns=[ 열의 이름 ] ) : 각  딕셔너리의 key가 열이름 으로, value 값이 각 열의 요소로 저장된 데이터 프레임이 생성된다. 

** pd.options.display.max_columns = 30 : 특성 컬럼이 너무 많은 방대한 데이터를 받았을 때 모든 열을 콘솔 창에 출력하고 싶을 때 유용하게 쓰인다

** pd.options.display.max_rows = 30 : 모든 행을 콘솔창에 전부 출력하고 싶을 때 쓰인다. 


3. 데이터 프레임 합치기 

pd.concat( df1, df2, axis=0 or 1) : axis=0이면 위아래 행단위로, axis=1이면 양옆으로 열단위로 합친다 


4. 행 이름 또는 열 이름 지정하기 

data_frame.columns = [ 'column1', 'column2', 'column3']

data_frame.index = [ 'row1', 'row2' , 'row3'] 

** 행의 index 값들을 열에 편입 시키는 법 : data_frame.reset_index( inplace=True ) -> 대부분의 파이썬 함수들 중 실행결과가 콘솔창에 나오는 함수들은 변경 결과를 원본데이터에 적용하지 않는다. 

								        변경 결과를 실행과 동시에 원본데이터에 적용하고 싶다면  inplace=True로 지정한다. 


5. 데이터 프레임 내 데이터 부분 조회하기

(1) 열 이름으로 조회하기 

data_frame[ 'column_name' ] : 해당 열의 데이터만 Series로 반환한다. (pandas Series : list와 같은 자료형이라고 보면 된다. 


(2) .loc 이용 : .loc, .iloc 이용할 시에는 왠만하면 행, 열 부분을 모두 명시해 줘야 오류가 안난다. (ex. data_frame.loc[ : ,  'column_name' ] 이런식으로) 

data_frame.loc[ 'row_index_name' , 'column_name' ] : .loc이용시, 행 또는 열의 인덱스 값이 아니라 해당 열, 행의 명칭으로 조회한다. 

data_frame.loc[ data_frame.species == 'setosa' , 'column_name' ] : 이와 같이 .loc 이용시, 조건문을 이용해서 subsetting도 가능하다. 

** 주의할 점 : 조건을 통해 행을 조회할 때, 파이썬에서는 항상 논리 연산자가 비교연산자보다 우선순위가 높다는 점을 숙지해야 한다 !! 


ex)  iris_df.loc[ iris_df[ 'Species' ] =='versicolor' & iris_df[ 'Sepal.Length' ] > 6.5 ] : 이런 식으로 작성을 할 경우 우리가 의도했던 대로 결과가 나오지 않고 오류가 발생한다. 


ex)  iris_df.loc[ (iris_df[ 'Species' ] =='versicolor') & (iris_df[ 'Sepal.Length' ] > 6.5) ] : 꼭 괄호를 씌워주어 우리가 의도한 대로 비교연산자가 먼저 수행되도록 해야한다. 


(3) .iloc 이용 : 행, 열 모두 인덱스 값만을 이용해서 접근한다. 

data_frame.iloc[ :, :-1] : 마지막 전 열 까지만 조회 

data_frame.iloc[ :, -1] : 마지막 열만 조회


6. 행 또는 열 요소 삭제 

data_frame.drop( '열 이름 or 행 인덱스명' , axis= 0 or 1, inplace=True) : 인덱스가 아닌 행 또는 열의 이름을 통해 요소를 지운다. (axis=0 이면 행기준, axis=1이면 열 기준) 

data_frame.drop( labels = [ '열 이름 or 행 인덱스명' ], axis= 0 or 1, inplace=True) : 여러 행 또는 열을 삭제 할시 labels 옵션에 여러 행 또는 열의 명을 list로 넣어준다. 


7. 새로운 열 또는 행 추가하기 

(1) 새로운 열 추가 

data_frame[ 'new_column_name' ] = pd.Series( [ 입력 값 ] ) 

(2) 새로운 행 추가 

data_frame.append( pandas Series or dictionary) 


8. 데이터 프레임 내 값 정렬하기 

data_frame.sort_index( axis=0 or 1, inplace=True) : axis=0 이면 행의 index순으로 정렬, axis=1이면 열 이름의 알파벳순으로 정렬 

data_frame.sort_values( by= '정렬 기준이 될 열이름', asecending = True) : by 옵션에 지정된 변수를 기준으로 정렬한다. ascending 옵션에 False를 주면 내림차순으로 정렬함


9. 요약 통계량 

data_frame.describe( ) : R에서 summary 함수 적용한 결과와 같이 기초 통계량 (평균, 분산 등등)에 관한 요약 정보가 나옴 

** data_frame.info( ) : R에서의 str( ) 함수와 같이 각 변수의 데이터 타입, 변수 갯수, 데이터 갯수 등이 나온다.
