13장.넘파이 배열 part1.


R에서의 matrix와 유사한 자료구조. numpy 배열에는 같은 하나의 데이터 타입만 올 수 있다.


1. 배열 생성 함수 

(1) np.arange( ) 함수 

np.arange( n, by=값 ) : 0부터 n-1까지의 1차원 배열 (= list)을 생성, by 옵션을 지정해주면 그 값 만큼 건너 뛰며 값 생성  

np.arange( n , dtype=float32).reshape(a,b) : 0 ~ n-1의 1차원 배열의 요소로 (3,5) 행렬을 만든다 

np.shape : 행 x 열을 (a,b) 튜플 형태로 반환함 

np.size : 배열 내 총 요소의 갯수를 반환한다 

type(배열) : 배열의 type을 반환한다. numpy array 

배열.dtype : 배열 내 요소의 데이터 타입을 반환한다. (integer32, float64, ....) 

** 참고 : np.set_printoptions( threshold = 10000) : 콘솔창에 보여지는 결과의 최대 갯수를 10000행 으로 설정함 

** np.set_printoptions( threshold = np.inf) : 콘솔창에 보여지는 결과 limit를 무제한으로 설정함. 


(2) np.array( ) 함수 

np.array( [ [1행,], [2행 ], ... ] , dtype=np.float32) : 32비트 (= 5바이트)  데이터 타입을 갖는 요소들의 numpy array 생성

(3) np.zeros(tup), np.ones(tup), np.empty(tup) -> 인자값에 (행,열) 정보를 튜플로 넣어준다. 각각 기본값이 0,1, 임의의 값을 넣어 배열을 생성한다

(4) np.linspace(from, to, num) : from 부터 to-1까지의 수들 중 num갯수 만큼 균일간격으로 수를 추출해서 1차원 배열을 만든다.

(5) np.random.random(tup) : 0~1사이의 난수를 뽑아서 (행,열) 차원을 가진 배열을 생성 

(6) np.random.normal(평균, 표준편차, 갯수) : 평균=? 이고 표준편차=? 인 정규분포에서 갯수=? 만큼의 난수를 생성  

** np.random.seed(123) -> random계열 함수 사용시 초기 seed 값을 지정해줄 수 있다.

2. 배열 복사

(1) 얕은 복사 : 단순 변수에 대입 또는 슬라이싱을 한 배열을 변수에 대입하는 경우. 

이럴 경우 새로 복사한 배열은 원본 배열과 같은 메모리 주소를 가지게 된다 -> 복사한 배열을 수정할 경우, 수정한 내용의 원본 배열에도 적용이 됨
  
(2) 깊은 복사 : 원본 배열과 다른 메모리 주소를 가지는, 새로운 배열 객체를 생성함 

new_array = np.arange(20, copy=True)

또는

new_array = np.arange(20).copy( )  


3. 배열의 차원 변경 

(1) 배열.reshape(4, -1) -> (4행 x 자동으로 계산된 열 수)로 배열의 차원을 변경

(2) 배열.resize(4,3) -> 4행3열의 배열로 차원 수 변환. (reshape 에서 처럼 -1을 넣어 자동 열 또는 행 계산이 불가함)

(3) 배열.T 또는 배열.transpose( ) -> 배열을 전치시킴 

(4) 배열.ravel( ) -> n x m 차원의 배열을 1차원 리스트 형태로 풀어준다 

4. 배열의 연산동작 

(1) 요소별 연산 

+, - , *, <, == 등등 기본 연산 부호는 행렬들간 각각의 요소들에 대해 연산을 수행한다. 


(2) 행렬연산, 축별 집계함수 

A@B : 행렬 A, B 사이의 내적을 수행 

sum(axis=0 또는1), min,max, var, ... : 함수내에 axis=0 이면 열 별, axis=1이면 행 별 연산을 수행한다. (행,열,면)의 구조를 가진 배열인 경우, axis=0이면 면 별, axis=1이면 열별, axis=2면 행별 연산을 수행한다.

 
5. 브로드 캐스팅 

예를 들어, a = np.array( [1,2,3] ); b=10 ; np.add(a,b) 연산을 수행하면, b=10이 a 배열의 차원 수에 맞게 복제하여 차원수를 맞추고 연산을 수행한다.

** 사용자가 직접 차원을 변경하는법 : 

a = np.array( [1,2,3] )

b = a[ :, np.newaxis] -> [1,2,3] 형태인 1차원 리스트 형태의 배열을 [ [1],
							[2],
							[3] ] 형태로 차원 변환 

6. 인덱싱과 슬라이싱 

데이터 세트에서 독립변수와 종속변수를 따로 분리하는데 많이 이용된다. 
 
2차원 배열 기준 -> a[ . . . , :-1] :모든행의 마지막 열을 제외한 모든 열 추출
 
		a[ :, -1] 전체 열 중 마지막 열만 추출

		a[ :, -3:-2:-1 ] : 전체 열 중 마지막 두열만 가져옴 

7. 두 배열 합치기 


(1) stack 계열 함수 

** stack 계열의 함수들에는 합칠 두 배열을 튜플 형태로 감싸서 넣어준다. 

np.vstack( (배열1, 배열2) ) -> R의 cbind( )와 동일. 옆으로 두 배열을 쌓는다.  

np.hstack( (배열1, 배열2) ) -> R의 rbind( )와 동일. 위아래로 두 배열을 쌓는다. 

np.dstack( (배열1, 배열2) ) -> 3차원 면,행,열의 형태로 된 자료를 1면의 1행, 2면의 2행 , ... 식으로 각 행 당 하나의 면으로 쌓는다. 

np.stack( (배열1, 배열2), axis = 0/1/2) -> stack 함수의 경우 axis=0이 면 단위, 1이 행 단위, 2가 열단위로 배열1과 배열2의 요소를 각각 쌓는다. 


(2) column_stack, row_stack 

np.column_stack( (배열1, 배열2) ) : np.hstack( ) 과 하는 일은 동일하나, 배열1, 배열2가 예를 들어 [1,2,3] ,  [4,5,6] 처럼 1차원 배열이면 이걸 3x1 열 벡터형식으로 자동으로 바꿔서 쌓는다. 

np.rowstack( (배멸1, 배열2) ) : np.vstack( ) 거의 유사하나. 예를 들어, 열벡터 형식으로 된 [1,2,3], [4,5,6] 두 열벡터를 1차원 리스트 형태로 바꾼 다음, 각 행별로 쌓는다. 


(3) np.r_[a,b,c], np.c_[a,b,c]

np.r_[ [a], [b], [c] ] : a,b,c가 리스트인 경우, 그냥 np.r_[ a,b,c ]로 실행하면 a,b,c 가 모두 합쳐진 긴 리스트가 생성 되므로 각 a,b,c 요소가 열 벡터 형식의 배열로 들어가야 된다

np.c_[ a,b,c ] : np.column_stack 과 동일함. 각 리스트를 각 열별로 쌓음 
