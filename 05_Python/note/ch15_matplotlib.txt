15장. matplotlib을 이용한 시각화 

1. plt.plot( ) 함수 : default 설정은 line 그래프이다. 

plt.plot( x축, y축, fmt ) 

--> fmt는 점 (marker) 또는 선의 타입이나 색깔을 지정하는 부분이다. 


fmt 지정 예시: 

'co--' : cyan색깔 + o 동그라미 모양의 marker + -- 점선 타입의 선을 그린다. 

'r-.' : red색깔 +  -. 점선 타입의 선을 그린다 


** marker 옵션 참조 : https://matplotlib.org/stable/api/markers_api.html

** color 옵션 참조 : https://matplotlib.org/stable/gallery/color/named_colors.html


2. subplot 그리기 

(1) 방법1 : subplot( ) 함수 이용하기 

import matplotlib.pyplot as plt 

plt.subplot( 행, 열, 그래프 그릴 위치 )

plt.plot( ) 

예시) 

plt.subplot( 2, 1, 1 )

plt.plot( ) 

--> 전체 캔버스를 2행 1열로 나누고, 1번 자리 (1행1열)에 그래프를 그린다 

plt.subplot( 2, 2, 3 )

plt.plot( )

--> 전체 캔버스를 2행 2열로 쪼개고, 3번 자리에 그린다 ( 좌하단, 즉 2행1열 자리에 그린다 )

plt.subplot( 2, 2, 4)

plt.plot( )

--> 전체 캔버스를 2행 2열로 쪼개고, 4번 자리에 그린다 ( 우하단, 즉 2행2열 자리에 그린다 )

결과는 1행 1열에 큰 그래프 하나, 2행에 작은 2개의 subplot이 그려진다. 


(2) 방법2 : subplots( ) 함수 이용 (이 방법을 주로 이용한다) 

**참고 : warning 창이 뜨지 않게 설정하는 법  

import warnings

warnings.filterwarnings(action='ignore')

** 

fig, axes = subplots( nrows , ncols, figsize )  # axes 변수에 각 subplot 캔버스가 array로 전달이 된다. (ncols, nrows의 default 값은 모두 1이다) 

axes[0,0].plot( ) 

axes[0,1].plot( ) 

	.
	.
	.

--> fmt 지정값이나, y축에 그려질 함수 등을 list에 담고, 

fig, ax = plt.subplots( 2, 2, figsize= (10,7) ) 

fmt_list = ['r','c--','g','r-.']

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10,6))

for i, ax in enumerate(axes.ravel()):

    ax.plot(x, func_list[i](x), fmt_list[i])	


이렇게 list에 fmt옵션, 그릴 함수등을 담고 for 문을 이용하여 subplot을 한번에 그리기도 한다. 


3. pandas 데이터 프레임과 matplotlib 

기본적으로 pandas 패키지에는 matplotlib이 내장되어있어, pandas 데이터 프레임 객체로 바로 그래프를 그릴 수 있다. 

DataFrame.plot( kind = ' line, box, scatter, ... ', 

	        figsize = tuple, title = ' ', xlabel= ' ', ylabel= ' ', 

	        grid = True/False, rot = 0~360, colormap = ' palette 지정 ', 

                    s= 점들의 사이즈, c= 점들의 크기,

                    subplots=True/False, sharex = True/False, sharey=True/False )   


4. 다양한 그래프 함수 종류들 

(1) 산점도 : plt.scatter( x, y, s = dot size, c= dot color, alpha = 0~1 투명도 ) 

(2) line 그래프 : plt.plot( x, y, linestyle='--', linewidth=0.8, [fmt] ) 

(3) line 그래프에서 처음과 끝부분을 이어서 빈공간에 색을 채운 그래프 : plt.fill( x,y, color )  

(4) line 그래프의 중간선을 긋고 사이의 빈공간에 색을 채운 그래프 : plt.fill_between ( x,y, color )  

(5) 수직, 수평선 긋기 plt.axvline( x좌표 값 ) , plt.axhline( y좌표 값) 

(6) bar 차트 : plt.bar( [ bar들의 중심 x좌표 ], [ bar들의 끝 y좌표 ], color, ... ) 

(7) x, y 축 반전 된 bar차트 :  plt.barh( [ bar들의 중심 x좌표 ], [ bar들의 끝 y좌표 ], color, ... )  -> R의 ggplot2에서 coord_flip( )을 적용했을 때 처럼 세로축에 x좌표가, 가로축에 y좌표가 적용된다 

(8) 히스토그램 : plt.hist( x축 좌표, bins = numeric, cumulative = True/False, orientation = ' vertical/horizontal ', histtype = ' step, .... ') 

(9) box plot : plt.boxplot( [ xticks에 찍힐 좌표들 ], [ 각 xtick에 해당하는 연속형 자료들 ] ) 

(10) violin plot : plt.violinplot( [ xticks에 찍힐 좌표들 ], [ 각 xtick에 해당하는 연속형 자료들 ] )


5. 그래프 커스터마이징 

(1) 그래프 한글 설정 : 보통 파이썬에서는 축이름, 그래프 제목을 한글로 지정하면 한글이 깨져 나온다. 따라서 한글 기본 설정을 해줘야 한다. 

plt.rc('font',family='Malgun Gothic') # 윈도우즈 기본설정 한글 폰트 

plt.rc('axes',unicode_minus=False) # 축의 - 부호 안 깨져서 나오게끔함 


** 원하는 한글 폰트 지정하기

import matplotlib.font_manager as fm 

font_path = 'c:/Windows/Fonts/HMFMPYUN.TTF' # C드라이브 아래, Windows 파일 아래, Fonts 파일 아래 여러 폰트들에 대한 파일들이 있는데, 그 중 원하는 폰트 스타일의 파일 경로를 선택하면 된다

font_prop = fm.FontProperties(fname=font_path, size=20)


(2) x축, y축 지정 옵션, 그래프 제목 설정 

개별 그래프 제목 지정: plt.title( 'title') : 만약 subplot을 그리고 title함수를 이용하면 해당 subplot 하나에 대한 타이틀만 달린다  

전체 그래프 통합 제목 지정 : plt.suptitle( 'title' ) : subplot을 그리고, 전체 그래프에 대한 제목을 달고 싶을때는 suptitle 함수를 이용한다. 

축의 범위 지정하기 (y축도 동일한 방법이용) : plt.xlim( lower_bound, upper_bound ) / plt.set_xlim( [ lower_bound, upper_bound ] )

축의 눈금 지정하기 (y축도 동일한 방법)  : set_xticks( [ x축 눈금 값들 ]) / set_xticklabels( [ x축 눈금 값들 ]) 

그래프내에 격자 보이기 : plt.grid(True/False)

그래프 테두리 설정 : plt.spines[' top ' / ' bottom '].set_visible(False)  -> 각각 그래프의 위 테두리, 아래 테두리를 삭제 한다. 


(3) 그래프 위에 text 쓰기

그래프에 text 작성 하기: plt.text( x좌표, y좌표, ' 작성 텍스트 ', style=' italic ', fontsize=20 )

** 수학기호를 작성할 때는 r' $ LaTex 작성 구문 $' 스타일로 작성해준다. 

그래프에 text와 특정지점을 가리키는 화살표 작성하기: plt.annotate('Sine',xytext=글자가 써질 좌표 (2,0.7),xy= 화살표가 가리킬 좌표 (6,0.), arrowprops=dict(arrowstyle=' 화살표 모양에 대한 스타일 ->',connectionstyle='화살표가 그려지는 스차일 angle3'), fontsize=20, fontproperties= 폰트 스타일 객체)


(4) subplot들 간에 간격 주기 

plt.subplots_adjust (hspace = 세로 여백, wspace = 가로 여백)  


(5) 축 공유 axes.twinx( ), axes.twiny( ): 예를들어, 스케일이 다른 y축 2개가 좌우로 지정되어 두개의 그래프를 하나의 plot에 함께 그려 비교함

fig, ax1 = plt.subplots()

ax1.plot(x,y1)

ax1.set(xlabel='x data', ylabel='y1 data',title='축공유')

ax2 = ax1.twinx() # ax1과 x축을 공유하는 ax2

ax2.plot(x,y2,color='g')

ax2.set_ylabel('y2 data')

ax3 = ax1.twiny() # ax1과 y축을 공유하는 ax3 

ax3.plot(-x,y1,'ro-')

ax3.set_xlabel('-x data', color='r')

plt.show()
  

(6) 범례 지정 

** 범례를 그래프 외부 상단에 위치시키기 : 그래프를 기준으로 범례의 좌표는 그래프 좌측부터 우측으로 x: 0~1, y또한 아래에서 위로 y:0~1이다. 

plt.legend( bbox_to_anxhor = (1.15, 1.0) )  -> 범례가 그래프 외부 우상단에 위치하게된다 


5. 그래프를 파일로 저장하기 

plt.savefig( ' 저장할 파일경로/파일이름.png ' )  

    
 



 