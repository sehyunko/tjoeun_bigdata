8장. 함수, 모듈, 패키지 

1. 함수 

def 함수명( 인자값1, 인자값2,..):
	''' 
	홑따옴표 3개 생성시 여러줄의 주석을 화면 그대로 나타나게 할 수 있다. 
	함수의 첫줄에 쓰인 주석은 함수의 docstring, 즉 함수의 사용설명서가 되어서, 함수를 생성할때 shift+tab 키를 누르면 
	docstring이 나타나 사용법을 확인할 수 있다 
	'''
	수행할 코드 

(1) 변수의 스코프 (scope) 

* 값에 의한 호출: 정수나, 실수 등의 기본 데이터 타입이 담긴 변수는 전역변수로 지정된 값을 함수 내에서 사용할 수 없다. 
	       다만, global 예약어를 통해 함수 내에서 해당변수가 전역변수임을 선언해주면 함수 내에서도 사용가능하다. 

* 참조에 의한 호출 : 리스트, 튜플 같은 객체(또는 참조형) 변수는 전역변수로 함수 외부에서 정의했다 하더라도 함수내부에서 호출을 하여 사용이 가능하다.


(2) 함수의 이름 변경

method = function( ) 형식으로 파이썬에서는 변수안에 함수를 담을 수 있다


(3) 함수의 매개변수 

함수를 정의할 때 올 수 있는 매개변수의 순서를 꼭 지켜야한다. 

순서 인자 -> 튜플 인자 -> 키워드 인자 -> 딕셔너리 인자

def (positional_args, *tuple_args, key_args =0, **dic_args):
	....   

순서인자 : 디폴트값이 정해지지 않은 인자이다. 

튜플인자 : 여러 개의 인자 값을 받고 인자값들을 하나의 튜플로 묶어서 전달함

키워드 인자: 디폴트 값이 정해진 인자 

딕셔너리인자: key=value 형태로 인자값을 받고, 딕셔너리로 모두 합쳐서 전달함


(4) 인수의 언패킹 

튜플 인수는 인자 값들을 받아 튜플 형태로 합친다. 하지만 만약 (1,2,3) 이라는 하나의 튜플값을 인자값으로 받는다면? 

( (1,2,3), ) 형태로 인자값을 전달할 것이다. 이는 원래 우리가 의도한 방향과 다를수 있다. 따라서 (1,2,3) 튜플 값에 대한 언패킹이 필요하게 된다. 

튜플 인수 언패킹 : *(1,2,3) ->  1,2,3 의 형태로 튜플을 풀어줌 

딕셔너리 인수 언패킹 : **{'name' : 'james', 'age':25} -> name='james', age =25 형태로 언패킹함 


(5) lambda 함수 

한줄 짜리 작은 익명함수로, 한번 쓰고 버려지는 1회용 함수이다. 

< 구조 >

lambda x : 리턴할 결과값  -> 복잡한 구문보다는, 간단한 if-else문 또는 간단한 연산 정도가 쓰인다 


(6) 리스트 컴프리헨션

주로 리스트 에서 원하는 조건에 따라 데이터를 추출하는 subsetting 과정에서 쓰인다. 

[ x**2 for x in data if x !=0 ] -> 이런 형태로 작성되며, 반환값은 리스트이다 


(7) filter, map 함수

filter( 반환값이 True/False인 함수, 적용될 iterable 데이터) : 특정 함수를 리스트 등의 데이터에 적용하여 결과값이 True인 데이터만 추출한다

map(  적용할 함수, 적용될 iterable 데이터) : 특정 함수를 iterable 데이터에 적용하여 결과값을 담은 리스트를 반환한다. 


2. 모듈과 패키지

패키지는 하나의 파이썬 폴더 단위, 모듈은 하나의 파이썬 파일( .py)이다. 

from import 또는 import 문을 통해서 로드를 시켜 사용한다. 

* 패키지를 처음 로드시키면 해당 패키지 폴더 안에 pycache 라는 폴더가 생긴다. -> 이후로 또 패키지를 load할때 빠르게 가져오기 위함

* 모든 패키지 내에는 __init__ 이라는 모듈이 같이 존재하는데, 해당 모듈은 패키지가 로드될때 반드시 실행되는 모듈이다. 

--> __init__ 모듈내에 __all__ 이라는 변수는 import * 시 가져오는 모듈들의 목록을 정의한다. 


