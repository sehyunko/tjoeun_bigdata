6장. 데이터 자료구조 

1. 리스트 : R에서 vector와 유사한 1차원 자료구조이다. 다만 R의 vector와 달리 다른 타입의 데이터들이 혼합되어 들어 갈 수 있다. 

(1) range( start, end, by )

start 주터 시작해서 end-1 까지의 숫자를 리턴함. by 디폴트 값은 1이다. 

결과값을 console 창에서 보려면 list( range( ) ) 형태로 출력 해야 된다.


(2) 2차원 리스트 : [ [1,2,3], [4,5,6] , [7,8,9] ] 과 같은 구조의 리스트임. 

1. 리스트 요소 조회하기 

* [1,2,3] -> 하나의 열 벡터 형태 

*  [ [1,2,3], [4,5,6] , [7,8,9] ] -> [ [1,2,3],     
			     [4,5,6],
			     [7,8,9] ]   2차원 리스트의 경우 이렇게 3x3 행렬의 형태로 구성된다고 이해하면 편하다. 

위의 2차원 리스트를 data라는 변수에 담는다 하면, 

원소에 접근시 , data[0][1] -> 위 리스트의 0행 1열의 원소로 접근 = 결과값 2

len(data) -> (3,5)가 나옴 

2. 리스트 요소 추가하기 

list_.append( 추가할 요소 ) : 기존 list에 추가할 내용을 덧붙임. 

list_.update( 리스트, 튜플 등의 iterable 데이터 ) : 만약 [1,2,3] list에 [0,1] 이라는 list를 append 하게 되면 [1,2,3, [0,1] ] 형태로 들어가게 된다. [1,2,3,0,1] 형태로 넣고 싶으면 update( )메소드를 이용한다

list_insert( 추가할 인덱스 위치, 추가할 요소) : append( ), update( ) 모두 뒷부분에 새로운 요소를 추가한다. 하지만 특정 위치에 원소를 껴넣고 싶다면 insert( ) 함수를 이용한다. 


3. 리스트 자료 인덱싱

list_.count( input ) : list 내에 input 요소의 갯수를 반환함

list_.index( input, start_index ) : list내에 input이라는 요소를 start_index 인덱스 위치부터 찾아서 마지막에 나온 input의 인덱스를 반환한다   

4. 리스트 슬라이싱 및 subsetting 

(1) 리스트 슬라이싱

list_[start:end:by] : list_ 내에서 start 인덱스 부터 end-1 까지 by만큼 증가하며 데이터를 추출함. 따로 지정을 안해주면 start는 0번 인덱스부터, end는 마지막 번째 인덱스 까지이다. 

ex. list[::-1] : 끝에서 부터 처음 까지 인덱스 값이 1 씩 줄며 데이터 추출, 리스트 반환 


(2) 리스트 컴프리헨션 : subsetting 할 때 주로 이용된다. 

[x for x in list_ if subsetting 할 조건]

[x**2 for x in list_] : list_ 내 요소들의 제곱값들을 추출 한다. 


(3) 리스트 내 요소 삭제 

list_.remove( 삭제할 요소 )  

list_.pop( 삭제할 요소 ) : remove( ) 함수와 동일하게 작동하나, 삭제후, 삭제한 요소를 반환하여 삭제한 요소를 재차 확인 할 수 있음. 

(4) 리스트 정렬하기 

list_.sort( reverse = True/False ): reverse의 디폴트 값은 False 이므로, 기본적으로 오름차순 정렬을 한다. reverse = True로 설정하면 내림차순 정렬 


(5) 리스트 복제하기 

new_list = list_.copy( ) 

만약 new_list = list_ 이런 식으로 복제를 할려한다면 안된다. list_요소들을 복제해서 주소값이 다른 new_list 라는 새로운 객체를 만드는 것이 아니고, 주소값도 같은 동일한 list_ 객체를 new_list 라는 변수에 담는 것에 불과하기 때문



2. 튜플 (tuple) : 리스트와 동일. 다만 수정, 삭제, 추가 등의 작업이 불가함. 

-> 조회하기 위한 메소드인 index, count 메소드는 list 와 동일하게 사용가능


3. 딕셔너리 (dictionary) : R에서의 list, 자바에서의 hash map과 같이 key값과 value값으로 이루어진 자료구조이다 

dict.keys( ) : 딕셔너리의 key값만 리스트로 반환

dict.values( ): 딕셔너리의 value값만 리스트로 반환 

dict.items( ) : (key, value) 가 담긴 튜플을 담은 리스트를 반환한다.


4. 셋 (set) : 중복되는 요소를 제거한 요소 종류만을 담음. 요소들간의 순서가 따로 없다. 

5. enumerate( ), in 연산자 

enumerate( 리스트 또는 튜플 ) : (index, value)를 튜플 형태로 반환한다. iterable 객체의 요소값과 인덱스 값을 동시에 조회해야 할 때 사용한다. 

조회할 요소 in 리스트/튜플 : 해당 요소가 리스트 또는 튜플 내에 있는 원소인지 파악하고자 할 때 사용한다 


