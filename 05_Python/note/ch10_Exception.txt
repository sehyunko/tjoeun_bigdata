10장. 예외처리 

1. 예외 처리 개념 

예외가 발생할 수도 있는 부분에 try-except 문으로 감싸서 프로그램 중단을 막고 예외처리를 함 

try:
     작동문 
except  예외 유형 as 별칭: # 예외유형 부분을 생략가능 하다. 이럴 경우 최상위 클래스인 Exception을 사용하는것과 같음   
     예외 발생시 수행할 구문
else: 
     예외가 발생하지 않았을 때 수행할 구문 ( 보통 else 절은 잘 안쓰고 finally문을 바로 쓴다) 
finally: 
     예외가 발생하든 발생하지 않든 바로 수행되는 구문 

** 보통 여러 except 문을 중첩해서 사용하게 되는데, 이럴경우 윗단에 상위 클래스의 에러 유형을 정의해주면 안된다. 

윗단에서 에러가 다 걸러져서, 밑단에 있는 자식 예외 클래스를 도달 하지를 못하는 구조가 되버리기 때문에.


2. 추상메소드 

파이썬에서는 자바에서 처럼 추상메소드 개념이 존재하지 않는다. 따라서 추상메소드를 파이썬에서 구현하고 싶다면 

예외처리 개념을 이용 하여 간접적으로 구현한다 

class 부모클래스: 
	def __init__(self, 인자값):
	     raise NotImplementedError # raise (자바에서의 throw: 예외를 강제로 발생시켜 자식 클래스에서 메소드 구현을 강제한다)
	def 일반 메소드(self, 인자값) 
	     raise NotImplementedError

class 자식클래스: 
	def __init__(self, 부모클래스 에서의 인자값 + 자식클래스에서의 인자값) 
	     변수값 초기화 
	def 일반 메소드 (self, 부모클래스 인자값 + 자식클래스 인자값) 
	     super( ).일반메소드(부모클래스 인자값) # 부모클래스에서 정의된 내용을 그대로 가져온다. super( ) 이용시 self 인자값 안 넣어줘도 됨
	     ## 부모클래스.메소드명(self, 부모클래스 인자값) # 만약 super( )가 아닌 이 방식을 통해 부모클래스 내용을 가져온다면, self 인자값을 꼭 넣어줘어야 한다
	     override 수행할 구문들


3. 파일 입출력에서의 예외처리 

보통 파이썬에서는 with 문을 통해 파일 연결을 열고 마지막에 with 블록을 빠져나오면 자동으로 close 시킨다. 

하지만 이런 with 절을 사용하지 않고 예외처리를 이용해 파일을 열고 닫을 수 있다. 

try: 
     f = open( '  파일경로  ', '모드')
except FileNotFoundError as e:
     print(e) # 에러 메시지를 그대로 출력함. 자바에서의 e.getMessage( )와 동일 
finally:
      f.close( ) 
     